#!/usr/bin/env python3
"""
gh-tool - A GitHub utility tool for simplifying common GitHub operations

This tool provides simplified commands for working with GitHub pull requests
and other GitHub-related tasks. It serves as a wrapper around Git commands
to make them more intuitive and easier to use.

Usage:
  gh-tool pr checkout <pr_number>  # Checkout a pull request
  gh-tool pr status                # Show status of PRs
  gh-tool pr info <pr_number>      # Show PR information
  gh-tool pr cleanup [pr_number]   # Cleanup PR branches
  gh-tool config set <key> <value> # Set a configuration value
  gh-tool config get <key>         # Get a configuration value
  gh-tool --help                   # Show help message
"""

import argparse
import os
import subprocess
import sys
import json
import re
from pathlib import Path

# ANSI color codes for colorized output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


class GitHubTool:
    def __init__(self):
        self.home_dir = str(Path.home())
        self.config_dir = os.path.join(self.home_dir, '.gh-tool')
        self.config_file = os.path.join(self.config_dir, 'config.json')
        self.config = self.load_config()

    def load_config(self):
        """Load configuration from the config file."""
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)
        
        if not os.path.exists(self.config_file):
            # Create default config
            default_config = {
                'default_remote': 'origin',
                'url_type': 'https',  # or 'ssh'
                'github_token': ''
            }
            with open(self.config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
            return default_config
        
        try:
            with open(self.config_file, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"{Colors.RED}Error: Config file is corrupted. Using defaults.{Colors.END}")
            return {'default_remote': 'origin', 'url_type': 'https', 'github_token': ''}

    def save_config(self):
        """Save current configuration to the config file."""
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)

    def config_set(self, key, value):
        """Set a configuration value."""
        if key not in self.config:
            print(f"{Colors.YELLOW}Warning: Creating new config key: {key}{Colors.END}")
        self.config[key] = value
        self.save_config()
        print(f"{Colors.GREEN}Config {key} set to {value}{Colors.END}")

    def config_get(self, key):
        """Get a configuration value."""
        if key in self.config:
            print(f"{key}: {self.config[key]}")
        else:
            print(f"{Colors.RED}Error: Config key '{key}' not found{Colors.END}")
            return 1
        return 0

    def is_git_repo(self):
        """Check if the current directory is a Git repository."""
        try:
            subprocess.run(
                ["git", "rev-parse", "--is-inside-work-tree"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=True,
                text=True
            )
            return True
        except subprocess.CalledProcessError:
            return False

    def get_github_remote_url(self):
        """Get the GitHub remote URL for the repository."""
        if not self.is_git_repo():
            print(f"{Colors.RED}Error: Not in a Git repository{Colors.END}")
            return None

        remote = self.config.get('default_remote', 'origin')
        try:
            result = subprocess.run(
                ["git", "remote", "get-url", remote],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=True,
                text=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            print(f"{Colors.RED}Error: Remote '{remote}' not found{Colors.END}")
            return None

    def pr_checkout(self, pr_number):
        """Checkout a pull request by number."""
        if not self.is_git_repo():
            print(f"{Colors.RED}Error: Not in a Git repository{Colors.END}")
            return 1

        remote = self.config.get('default_remote', 'origin')
        branch_name = f"pr-{pr_number}"
        
        print(f"{Colors.BLUE}Fetching PR #{pr_number} from {remote}...{Colors.END}")
        
        try:
            # Fetch the PR
            fetch_cmd = ["git", "fetch", remote, f"pull/{pr_number}/head:{branch_name}"]
            subprocess.run(
                fetch_cmd,
                check=True,
                text=True
            )
            
            # Checkout the branch
            checkout_cmd = ["git", "checkout", branch_name]
            subprocess.run(
                checkout_cmd,
                check=True,
                text=True
            )
            
            print(f"{Colors.GREEN}Successfully checked out PR #{pr_number} to branch '{branch_name}'{Colors.END}")
            return 0
        except subprocess.CalledProcessError as e:
            print(f"{Colors.RED}Error: Failed to checkout PR #{pr_number}{Colors.END}")
            print(f"{Colors.RED}Details: {str(e)}{Colors.END}")
            return 1

    def pr_status(self):
        """Show status of pull requests."""
        if not self.is_git_repo():
            print(f"{Colors.RED}Error: Not in a Git repository{Colors.END}")
            return 1
            
        print(f"{Colors.YELLOW}PR Status functionality not yet implemented{Colors.END}")
        print(f"{Colors.BLUE}This will show the status of open pull requests{Colors.END}")
        return 0

    def pr_info(self, pr_number):
        """Show information about a specific pull request."""
        if not self.is_git_repo():
            print(f"{Colors.RED}Error: Not in a Git repository{Colors.END}")
            return 1
            
        print(f"{Colors.YELLOW}PR Info functionality not yet implemented{Colors.END}")
        print(f"{Colors.BLUE}This will show details for PR #{pr_number}{Colors.END}")
        return 0

    def pr_cleanup(self, pr_number=None):
        """Clean up PR branches."""
        if not self.is_git_repo():
            print(f"{Colors.RED}Error: Not in a Git repository{Colors.END}")
            return 1
            
        if pr_number:
            print(f"{Colors.YELLOW}PR Cleanup functionality not yet implemented{Colors.END}")
            print(f"{Colors.BLUE}This will clean up branch for PR #{pr_number}{Colors.END}")
        else:
            print(f"{Colors.YELLOW}Bulk PR Cleanup functionality not yet implemented{Colors.END}")
            print(f"{Colors.BLUE}This will clean up all merged PR branches{Colors.END}")
        return 0


def main():
    """Main entry point for the gh-tool utility."""
    tool = GitHubTool()
    
    parser = argparse.ArgumentParser(
        description='GitHub utility tool for simplifying common GitHub operations',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Command to run')
    
    # PR commands
    pr_parser = subparsers.add_parser('pr', help='Pull request operations')
    pr_subparsers = pr_parser.add_subparsers(dest='pr_command', help='PR command to run')
    
    # PR checkout
    checkout_parser = pr_subparsers.add_parser('checkout', help='Checkout a pull request')
    checkout_parser.add_argument('pr_number', type=int, help='Pull request number')
    
    # PR status
    pr_subparsers.add_parser('status', help='Show status of PRs')
    
    # PR info
    info_parser = pr_subparsers.add_parser('info', help='Show PR information')
    info_parser.add_argument('pr_number', type=int, help='Pull request number')
    
    # PR cleanup
    cleanup_parser = pr_subparsers.add_parser('cleanup', help='Cleanup PR branches')
    cleanup_parser.add_argument('pr_number', type=int, nargs='?', help='Pull request number (optional)')
    
    # Config commands
    config_parser = subparsers.add_parser('config', help='Configuration operations')
    config_subparsers = config_parser.add_subparsers(dest='config_command', help='Config command to run')
    
    # Config set
    set_parser = config_subparsers.add_parser('set', help='Set a configuration value')
    set_parser.add_argument('key', help='Configuration key')
    set_parser.add_argument('value', help='Configuration value')
    
    # Config get
    get_parser = config_subparsers.add_parser('get', help='Get a configuration value')
    get_parser.add_argument('key', help='Configuration key')
    
    args = parser.parse_args()
    
    # Process commands
    if args.command == 'pr':
        if args.pr_command == 'checkout':
            return tool.pr_checkout(args.pr_number)
        elif args.pr_command == 'status':
            return tool.pr_status()
        elif args.pr_command == 'info':
            return tool.pr_info(args.pr_number)
        elif args.pr_command == 'cleanup':
            return tool.pr_cleanup(args.pr_number)
        else:
            pr_parser.print_help()
    elif args.command == 'config':
        if args.config_command == 'set':
            return tool.config_set(args.key, args.value)
        elif args.config_command == 'get':
            return tool.config_get(args.key)
        else:
            config_parser.print_help()
    else:
        parser.print_help()
    
    return 0


if __name__ == '__main__':
    sys.exit(main())

